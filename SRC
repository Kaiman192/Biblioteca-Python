import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import os

# Fun√ß√£o para carregar os usu√°rios existentes do arquivo
def carregar_usuarios():
    usuarios = {}
    if os.path.exists('usuarios.txt'):
        with open('usuarios.txt', 'r') as f:
            for line in f:
                username, password = line.strip().split(',')
                usuarios[username] = password
    return usuarios

# Fun√ß√£o para salvar um novo usu√°rio no arquivo
def salvar_usuario(username, password):
    with open('usuarios.txt', 'a') as f:
        f.write(f"{username},{password}\n")

class Biblioteca:
    def __init__(self, master):
        self.master = master
        master.title("Sistema de Gerenciamento de Biblioteca")
        master.geometry("800x600")  # Ajustei o tamanho da janela para ser mais pr√°tico

        # Tela de Login
        self.login_screen()

        # Lista de livros e empr√©stimos
        self.books = []
        self.borrowed_books = []

    def login_screen(self):
        # Limpa o conte√∫do da janela principal
        for widget in self.master.winfo_children():
            widget.destroy()

        # T√≠tulo
        self.label = tk.Label(self.master, text="Bem-vinda √† Biblioteca", font=("Arial", 24))
        self.label.pack(pady=20)

        # Nome de usu√°rio
        self.label_user = tk.Label(self.master, text="Nome de Usu√°rio:", font=("Arial", 12))
        self.label_user.pack(pady=5)
        self.entry_user = tk.Entry(self.master, font=("Arial", 12))
        self.entry_user.pack(pady=5)

        # Senha
        self.label_pass = tk.Label(self.master, text="Senha:", font=("Arial", 12))
        self.label_pass.pack(pady=5)
        self.entry_pass = tk.Entry(self.master, font=("Arial", 12), show="*")
        self.entry_pass.pack(pady=5)

        # Bot√£o de Login
        self.btn_login = tk.Button(self.master, text="Login", command=self.login, width=20, height=2, font=("Arial", 12))
        self.btn_login.pack(pady=10)

    def login(self):
        # Verifica se o usu√°rio e a senha est√£o corretos
        username = self.entry_user.get()
        password = self.entry_pass.get()
        usuarios = carregar_usuarios()

        if username in usuarios and usuarios[username] == password:
            self.main_screen()  # Se o login for bem-sucedido, vai para a tela principal
        else:
            messagebox.showerror("Erro", "Nome de usu√°rio ou senha incorretos.")

    def main_screen(self):
        # Limpa a tela de login
        for widget in self.master.winfo_children():
            widget.destroy()

        # T√≠tulo
        self.label = tk.Label(self.master, text="Bem-vinda √† Biblioteca", font=("Arial", 24))
        self.label.pack(pady=20)

        # Menu
        self.menu_frame = tk.Frame(self.master)
        self.menu_frame.pack(pady=10)

        # Adicionar Livro
        self.btn_add_book = tk.Button(self.menu_frame, text="üìö Adicionar Livro", command=self.add_book, width=20, height=2, font=("Arial", 12))
        self.btn_add_book.pack(pady=5)

        # Ver Todos os Livros
        self.btn_view_books = tk.Button(self.menu_frame, text="üìñ Ver Todos os Livros", command=self.view_books, width=20, height=2, font=("Arial", 12))
        self.btn_view_books.pack(pady=5)

        # Remover Livro
        self.btn_remove_book = tk.Button(self.menu_frame, text="‚ùå Remover Livro", command=self.remove_book, width=20, height=2, font=("Arial", 12))
        self.btn_remove_book.pack(pady=5)

        # Buscar Livro
        self.btn_search_book = tk.Button(self.menu_frame, text="üîç Buscar Livro", command=self.search_book, width=20, height=2, font=("Arial", 12))
        self.btn_search_book.pack(pady=5)

        # Alugar Livro
        self.btn_borrow_book = tk.Button(self.menu_frame, text="üì¶ Alugar Livro", command=self.borrow_book, width=20, height=2, font=("Arial", 12))
        self.btn_borrow_book.pack(pady=5)

        # Devolver Livro
        self.btn_return_book = tk.Button(self.menu_frame, text="üîÑ Devolver Livro", command=self.return_book, width=20, height=2, font=("Arial", 12))
        self.btn_return_book.pack(pady=5)

        # Ver Livros Emprestados
        self.btn_view_borrowed = tk.Button(self.menu_frame, text="üìú Ver Livros Emprestados", command=self.view_borrowed_books, width=20, height=2, font=("Arial", 12))
        self.btn_view_borrowed.pack(pady=5)

        # Cadastrar Usu√°rio
        self.btn_register = tk.Button(self.menu_frame, text="üìù Cadastrar Usu√°rio", command=self.register, width=20, height=2, font=("Arial", 12))
        self.btn_register.pack(pady=5)

        # Sair
        self.btn_exit = tk.Button(self.master, text="üö™ Sair", command=self.sair, width=20, height=2, font=("Arial", 12))
        self.btn_exit.pack(pady=20)

    def add_book(self):
        # Janela de di√°logo para adicionar informa√ß√µes do livro
        add_book_window = tk.Toplevel(self.master)
        add_book_window.title("Adicionar Livro")
        add_book_window.geometry("400x400")

        # Label e entrada para o t√≠tulo do livro
        label_title = tk.Label(add_book_window, text="T√≠tulo do Livro:", font=("Arial", 12))
        label_title.pack(pady=5)
        entry_title = tk.Entry(add_book_window, font=("Arial", 12))
        entry_title.pack(pady=5)

        # Label e entrada para o autor
        label_author = tk.Label(add_book_window, text="Autor:", font=("Arial", 12))
        label_author.pack(pady=5)
        entry_author = tk.Entry(add_book_window, font=("Arial", 12))
        entry_author.pack(pady=5)

        # Label e entrada para o g√™nero
        label_genre = tk.Label(add_book_window, text="G√™nero:", font=("Arial", 12))
        label_genre.pack(pady=5)
        entry_genre = tk.Entry(add_book_window, font=("Arial", 12))
        entry_genre.pack(pady=5)

        # Label e entrada para a data de lan√ßamento
        label_release = tk.Label(add_book_window, text="Data de Lan√ßamento:", font=("Arial", 12))
        label_release.pack(pady=5)
        entry_release = tk.Entry(add_book_window, font=("Arial", 12))
        entry_release.pack(pady=5)

        # Label e entrada para a sinopse
        label_synopsis = tk.Label(add_book_window, text="Sinopse:", font=("Arial", 12))
        label_synopsis.pack(pady=5)
        entry_synopsis = tk.Text(add_book_window, height=4, font=("Arial", 12))
        entry_synopsis.pack(pady=5)

        # Fun√ß√£o que ser√° chamada ao confirmar
        def confirmar_adicao():
            title = entry_title.get().strip()
            author = entry_author.get().strip()
            genre = entry_genre.get().strip()
            release = entry_release.get().strip()
            synopsis = entry_synopsis.get("1.0", tk.END).strip()

            if title and author and genre and release and synopsis:
                # Armazenar as informa√ß√µes do livro como um dicion√°rio
                book_info = {"T√≠tulo": title, "Autor": author, "G√™nero": genre, "Data de Lan√ßamento": release, "Sinopse": synopsis}
                self.books.append(book_info)
                messagebox.showinfo("Sucesso", f"Livro '{title}' adicionado com sucesso!")
                add_book_window.destroy()
            else:
                messagebox.showerror("Erro", "Todos os campos devem ser preenchidos.")

        # Bot√£o para confirmar a adi√ß√£o do livro
        btn_confirm = tk.Button(add_book_window, text="Adicionar Livro", command=confirmar_adicao, font=("Arial", 12))
        btn_confirm.pack(pady=20)

    def view_books(self):
        if not self.books:
            messagebox.showinfo("Livros", "Nenhum livro cadastrado.")
        else:
            # Criar uma janela com scrolledtext para exibir os livros
            self.create_info_window("Lista de Livros", self.books)

    def remove_book(self):
        book_title = simpledialog.askstring("Remover Livro", "Digite o t√≠tulo do livro que deseja remover:")
        if not book_title:
            return
        for book in self.books:
            if book["T√≠tulo"].lower() == book_title.lower():
                self.books.remove(book)
                messagebox.showinfo("Remover Livro", f"Livro '{book_title}' removido com sucesso.")
                return
        messagebox.showerror("Erro", f"Livro '{book_title}' n√£o encontrado.")

    def search_book(self):
        search_title = simpledialog.askstring("Buscar Livro", "Digite o t√≠tulo do livro:")
        if not search_title:
            return
        found_books = [book for book in self.books if search_title.lower() in book["T√≠tulo"].lower()]
        if not found_books:
            messagebox.showinfo("Buscar Livro", f"Nenhum livro encontrado com o t√≠tulo '{search_title}'.")
        else:
            # Criar uma janela com scrolledtext para exibir os resultados
            self.create_info_window("Resultado da Busca", found_books)

    def borrow_book(self):
        if not self.books:
            messagebox.showinfo("Livros", "Nenhum livro cadastrado.")
            return
        book_title = simpledialog.askstring("Alugar Livro", "Digite o t√≠tulo do livro que deseja alugar:")
        for book in self.books:
            if book["T√≠tulo"].lower() == book_title.lower():
                self.books.remove(book)
                self.borrowed_books.append(book)
                messagebox.showinfo("Sucesso", f"Livro '{book_title}' alugado com sucesso.")
                return
        messagebox.showerror("Erro", f"Livro '{book_title}' n√£o encontrado.")

    def return_book(self):
        if not self.borrowed_books:
            messagebox.showinfo("Livros Emprestados", "Nenhum livro emprestado.")
            return
        book_title = simpledialog.askstring("Devolver Livro", "Digite o t√≠tulo do livro que deseja devolver:")
        for book in self.borrowed_books:
            if book["T√≠tulo"].lower() == book_title.lower():
                self.borrowed_books.remove(book)
                self.books.append(book)
                messagebox.showinfo("Sucesso", f"Livro '{book_title}' devolvido com sucesso.")
                return
        messagebox.showerror("Erro", f"Livro '{book_title}' n√£o encontrado.")

    def view_borrowed_books(self):
        if not self.borrowed_books:
            messagebox.showinfo("Livros Emprestados", "Nenhum livro emprestado.")
        else:
            # Criar uma janela com scrolledtext para exibir os livros emprestados
            self.create_info_window("Livros Emprestados", self.borrowed_books)

    def register(self):
        # Janela para cadastro de novo usu√°rio
        username = simpledialog.askstring("Cadastrar Usu√°rio", "Digite o nome de usu√°rio:")
        if not username:
            return
        password = simpledialog.askstring("Cadastrar Usu√°rio", "Digite a senha:", show="*")
        if not password:
            return
        usuarios = carregar_usuarios()
        if username in usuarios:
            messagebox.showerror("Erro", "Usu√°rio j√° cadastrado.")
        else:
            salvar_usuario(username, password)
            messagebox.showinfo("Sucesso", f"Usu√°rio '{username}' cadastrado com sucesso.")

    def sair(self):
        self.master.destroy()

    def create_info_window(self, title, books_list):
        info_window = tk.Toplevel(self.master)
        info_window.title(title)
        info_window.geometry("600x400")

        text_area = scrolledtext.ScrolledText(info_window, wrap=tk.WORD, font=("Arial", 12))
        text_area.pack(pady=10, padx=10, fill="both", expand=True)

        for book in books_list:
            text_area.insert(tk.END, f"T√≠tulo: {book['T√≠tulo']}\n")
            text_area.insert(tk.END, f"Autor: {book['Autor']}\n")
            text_area.insert(tk.END, f"G√™nero: {book['G√™nero']}\n")
            text_area.insert(tk.END, f"Data de Lan√ßamento: {book['Data de Lan√ßamento']}\n")
            text_area.insert(tk.END, f"Sinopse: {book['Sinopse']}\n")
            text_area.insert(tk.END, "-"*50 + "\n")

        text_area.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    biblioteca = Biblioteca(root)
    root.mainloop()
