import sqlite3
import tkinter as tk
from tkinter import messagebox, simpledialog, Frame, Scrollbar, Canvas, ttk

def create_connection(db_file):
    conn = sqlite3.connect(db_file)
    return conn

def create_tables(conn):
    cursor = conn.cursor()
    cursor.execute('DROP TABLE IF EXISTS Livros')
    cursor.execute('DROP TABLE IF EXISTS Autores')
    
    cursor.execute('''
        CREATE TABLE Autores (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Nome TEXT NOT NULL
        )
    ''')

    cursor.execute('''
        CREATE TABLE Livros (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Titulo TEXT NOT NULL,
            AutorID INTEGER,
            AnoPublicacao INTEGER,
            Genero TEXT,
            Sinopse TEXT,
            FOREIGN KEY (AutorID) REFERENCES Autores(ID)
        )
    ''')
    conn.commit()

def add_livro(conn, titulo, autor_id, ano_publicacao, genero, sinopse):
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero, Sinopse) VALUES (?, ?, ?, ?, ?)',
                       (titulo, autor_id, ano_publicacao, genero, sinopse))
        conn.commit()
        messagebox.showinfo("Sucesso", "Livro adicionado com sucesso!")
    except sqlite3.Error as e:
        messagebox.showerror("Erro", str(e))

def add_autor(conn, nome):
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO Autores (Nome) VALUES (?)', (nome,))
        conn.commit()
        messagebox.showinfo("Sucesso", "Autor adicionado com sucesso!")
    except sqlite3.Error as e:
        messagebox.showerror("Erro", str(e))

def display_livros(conn, livros, title):
    list_window = tk.Toplevel()
    list_window.title(title)
    list_window.geometry("400x400")

    canvas = Canvas(list_window)
    scroll_y = Scrollbar(list_window, orient="vertical", command=canvas.yview)
    scrollable_frame = Frame(canvas)

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

    def on_mouse_wheel(event):
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")

    list_window.bind_all("<MouseWheel>", on_mouse_wheel)

    for livro in livros:
        livro_frame = Frame(scrollable_frame, bd=2, relief="groove", padx=10, pady=10)
        livro_frame.pack(pady=5, fill='x')
        tk.Label(livro_frame, text=f'Título: {livro[0]}', font=("Arial", 12)).pack()
        tk.Label(livro_frame, text=f'Autor: {livro[1]}', font=("Arial", 10)).pack()
        tk.Label(livro_frame, text=f'Ano: {livro[2]}', font=("Arial", 10)).pack()
        tk.Label(livro_frame, text=f'Gênero: {livro[3]}', font=("Arial", 10)).pack()
        tk.Label(livro_frame, text=f'Sinopse: {livro[4]}', font=("Arial", 10)).pack()

    canvas.configure(yscrollcommand=scroll_y.set)
    scroll_y.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)

# Livros aclamados
def list_acclaimed_books(conn):
    livros_aclamados = [
        ("O Sol é para Todos", "Harper Lee", 1960, "Ficção", "Uma história sobre a injustiça racial no sul dos EUA."),
        ("Cem Anos de Solidão", "Gabriel García Márquez", 1967, "Ficção", "A história da família Buendía em Macondo, uma aldeia mágica."),
        ("1984", "George Orwell", 1949, "Ficção Científica", "Uma distopia sobre um regime totalitário que controla tudo."),
        ("Orgulho e Preconceito", "Jane Austen", 1813, "Romance", "A história de Elizabeth Bennet e seu relacionamento com Mr. Darcy."),
        ("A Guerra dos Tronos", "George R.R. Martin", 1996, "Fantasia", "A luta pelo poder nos Sete Reinos de Westeros."),
        ("O Grande Gatsby", "F. Scott Fitzgerald", 1925, "Ficção", "A vida extravagante de Jay Gatsby nos anos 1920."),
        ("A Menina que Roubava Livros", "Markus Zusak", 2005, "Ficção", "Uma história narrada pela Morte durante a Segunda Guerra Mundial."),
        ("O Alquimista", "Paulo Coelho", 1988, "Ficção", "A jornada de um jovem pastor em busca de seu destino."),
        ("Dom Quixote", "Miguel de Cervantes", 1605, "Ficção", "A história de um homem que se torna um cavaleiro andante."),
        ("A Revolução dos Bichos", "George Orwell", 1945, "Ficção", "Uma sátira sobre a corrupção do socialismo na União Soviética."),
    ]

    display_livros(conn, livros_aclamados, "Livros Aclamados")

# Livros mais vendidos
def list_best_selling_books(conn):
    livros_vendidos = [
        ("Harry Potter e a Pedra Filosofal", "J.K. Rowling", 1997, "Fantasia", "Um jovem bruxo descobre seu destino em Hogwarts."),
        ("O Senhor dos Anéis: A Sociedade do Anel", "J.R.R. Tolkien", 1954, "Fantasia", "A jornada de Frodo para destruir um anel maligno."),
        ("O Código Da Vinci", "Dan Brown", 2003, "Thriller", "Uma caça ao tesouro que revela segredos da história."),
        ("A Culpa é das Estrelas", "John Green", 2012, "Romance", "A história de amor entre dois adolescentes com câncer."),
        ("O Hobbit", "J.R.R. Tolkien", 1937, "Fantasia", "A aventura de Bilbo Bolseiro em uma jornada épica."),
        ("Cinquenta Tons de Cinza", "E.L. James", 2011, "Romance", "Um relacionamento complicado entre Anastasia e Christian."),
        ("O Senhor dos Anéis: As Duas Torres", "J.R.R. Tolkien", 1954, "Fantasia", "A continuação da jornada de Frodo e Sam."),
        ("O Senhor dos Anéis: O Retorno do Rei", "J.R.R. Tolkien", 1955, "Fantasia", "O clímax da luta contra Sauron."),
        ("O Diário de Anne Frank", "Anne Frank", 1947, "Biografia", "O diário de uma jovem judia durante a Segunda Guerra Mundial."),
        ("A Cabana", "William P. Young", 2007, "Ficção", "Um homem enfrenta sua dor em um encontro com Deus."),
    ]

    display_livros(conn, livros_vendidos, "Livros Mais Vendidos")

def remove_livro(conn, livro_id):
    cursor = conn.cursor()
    try:
        cursor.execute('DELETE FROM Livros WHERE ID = ?', (livro_id,))
        conn.commit()
        messagebox.showinfo("Sucesso", "Livro removido com sucesso!")
    except sqlite3.Error as e:
        messagebox.showerror("Erro", str(e))

def update_livro(conn, livro_id, titulo, autor_id, ano_publicacao, genero, sinopse):
    cursor = conn.cursor()
    try:
        cursor.execute('''UPDATE Livros SET Titulo = ?, AutorID = ?, AnoPublicacao = ?, Genero = ?, Sinopse = ? WHERE ID = ?''',
                       (titulo, autor_id, ano_publicacao, genero, sinopse, livro_id))
        conn.commit()
        messagebox.showinfo("Sucesso", "Livro atualizado com sucesso!")
    except sqlite3.Error as e:
        messagebox.showerror("Erro", str(e))

def main_ui(conn):
    window = tk.Tk()
    window.title("Biblioteca")
    window.geometry("600x500")

    main_frame = tk.Frame(window)
    main_frame.pack(padx=20, pady=20)

    tk.Label(main_frame, text="Bem-Vindo à Biblioteca", font=("Arial", 18)).pack(pady=10)

    # Botões para adicionar livro, autor, remover e atualizar livro
    ttk.Button(main_frame, text="Adicionar Livro", command=lambda: add_livro_ui(conn)).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="Adicionar Autor", command=lambda: add_autor_ui(conn)).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="Livros Aclamados", command=lambda: list_acclaimed_books(conn)).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="Livros Mais Vendidos", command=lambda: list_best_selling_books(conn)).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="Remover Livro", command=lambda: remove_livro_ui(conn)).pack(pady=5, fill='x')
    ttk.Button(main_frame, text="Atualizar Livro", command=lambda: update_livro_ui(conn)).pack(pady=5, fill='x')

def add_livro_ui(conn):
    window = tk.Toplevel()
    window.title("Adicionar Livro")
    window.geometry("300x400")

    tk.Label(window, text="Adicionar Livro", font=("Arial", 14)).pack(pady=10)

    tk.Label(window, text="Título:").pack()
    entry_titulo = tk.Entry(window)
    entry_titulo.pack(pady=5)

    tk.Label(window, text="ID do Autor:").pack()
    entry_autor_id = tk.Entry(window)
    entry_autor_id.pack(pady=5)

    tk.Label(window, text="Ano de Publicação:").pack()
    entry_ano = tk.Entry(window)
    entry_ano.pack(pady=5)

    tk.Label(window, text="Gênero:").pack()
    entry_genero = tk.Entry(window)
    entry_genero.pack(pady=5)

    tk.Label(window, text="Sinopse:").pack()
    entry_sinopse = tk.Entry(window)
    entry_sinopse.pack(pady=5)

    ttk.Button(window, text="Adicionar Livro", command=lambda: add_livro(conn, entry_titulo.get(), entry_autor_id.get(), entry_ano.get(), entry_genero.get(), entry_sinopse.get())).pack(pady=10)

def add_autor_ui(conn):
    window = tk.Toplevel()
    window.title("Adicionar Autor")
    window.geometry("300x200")

    tk.Label(window, text="Adicionar Autor", font=("Arial", 14)).pack(pady=10)

    tk.Label(window, text="Nome:").pack()
    entry_nome = tk.Entry(window)
    entry_nome.pack(pady=5)

    ttk.Button(window, text="Adicionar Autor", command=lambda: add_autor(conn, entry_nome.get())).pack(pady=10)

def remove_livro_ui(conn):
    window = tk.Toplevel()
    window.title("Remover Livro")
    window.geometry("300x200")

    tk.Label(window, text="Remover Livro", font=("Arial", 14)).pack(pady=10)

    tk.Label(window, text="ID do Livro:").pack()
    entry_id = tk.Entry(window)
    entry_id.pack(pady=5)

    ttk.Button(window, text="Remover Livro", command=lambda: remove_livro(conn, entry_id.get())).pack(pady=10)

def update_livro_ui(conn):
    window = tk.Toplevel()
    window.title("Atualizar Livro")
    window.geometry("300x400")

    tk.Label(window, text="Atualizar Livro", font=("Arial", 14)).pack(pady=10)

    tk.Label(window, text="ID do Livro:").pack()
    entry_id = tk.Entry(window)
    entry_id.pack(pady=5)

    tk.Label(window, text="Novo Título:").pack()
    entry_titulo = tk.Entry(window)
    entry_titulo.pack(pady=5)

    tk.Label(window, text="Novo ID do Autor:").pack()
    entry_autor_id = tk.Entry(window)
    entry_autor_id.pack(pady=5)

    tk.Label(window, text="Novo Ano de Publicação:").pack()
    entry_ano = tk.Entry(window)
    entry_ano.pack(pady=5)

    tk.Label(window, text="Novo Gênero:").pack()
    entry_genero = tk.Entry(window)
    entry_genero.pack(pady=5)

    tk.Label(window, text="Nova Sinopse:").pack()
    entry_sinopse = tk.Entry(window)
    entry_sinopse.pack(pady=5)

    ttk.Button(window, text="Atualizar Livro", command=lambda: update_livro(conn, entry_id.get(), entry_titulo.get(), entry_autor_id.get(), entry_ano.get(), entry_genero.get(), entry_sinopse.get())).pack(pady=10)

if __name__ == "__main__":
    conn = create_connection("biblioteca.db")
    create_tables(conn)
    main_ui(conn)


