import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext
import os

# Fun√ß√£o para carregar os usu√°rios existentes do arquivo
def carregar_usuarios():
    usuarios = {}
    if os.path.exists('usuarios.txt'):
        with open('usuarios.txt', 'r') as f:
            for line in f:
                username, password = line.strip().split(',')
                usuarios[username] = password
    return usuarios

# Fun√ß√£o para salvar um novo usu√°rio no arquivo
def salvar_usuario(username, password):
    with open('usuarios.txt', 'a') as f:
        f.write(f"{username},{password}\n")

class Biblioteca:
    def __init__(self, master):
        self.master = master
        master.title("Sistema de Gerenciamento de Biblioteca")
        master.geometry("800x600")

        # Inicializa√ß√£o
        self.books = [
            {"T√≠tulo": "1984", "Autor": "George Orwell", "G√™nero": "Distopia", "Data de Lan√ßamento": "1949", "Sinopse": "Uma vis√£o aterrorizante de um futuro totalit√°rio."}
        ]  # Livro fixo na lista de livros
        self.borrowed_books = []

        # Tela inicial de login
        self.login_screen()

    def login_screen(self):
        for widget in self.master.winfo_children():
            widget.destroy()

        tk.Label(self.master, text="Bem-vinda √† Biblioteca", font=("Arial", 24)).pack(pady=20)

        tk.Label(self.master, text="Nome de Usu√°rio:", font=("Arial", 12)).pack(pady=5)
        self.entry_user = tk.Entry(self.master, font=("Arial", 12))
        self.entry_user.pack(pady=5)

        tk.Label(self.master, text="Senha:", font=("Arial", 12)).pack(pady=5)
        self.entry_pass = tk.Entry(self.master, font=("Arial", 12), show="*")
        self.entry_pass.pack(pady=5)

        frame_buttons = tk.Frame(self.master)
        frame_buttons.pack(pady=10)

        tk.Button(frame_buttons, text="Login", command=self.login, width=15, font=("Arial", 12)).grid(row=0, column=0, padx=5)
        tk.Button(frame_buttons, text="Registrar", command=self.register_screen, width=15, font=("Arial", 12)).grid(row=0, column=1, padx=5)

    def login(self):
        username = self.entry_user.get()
        password = self.entry_pass.get()
        usuarios = carregar_usuarios()

        if username in usuarios and usuarios[username] == password:
            self.main_screen()
        else:
            messagebox.showerror("Erro", "Nome de usu√°rio ou senha incorretos.")

    def register_screen(self):
        for widget in self.master.winfo_children():
            widget.destroy()

        tk.Label(self.master, text="Registrar Novo Usu√°rio", font=("Arial", 24)).pack(pady=20)

        tk.Label(self.master, text="Nome de Usu√°rio:", font=("Arial", 12)).pack(pady=5)
        self.entry_new_user = tk.Entry(self.master, font=("Arial", 12))
        self.entry_new_user.pack(pady=5)

        tk.Label(self.master, text="Senha:", font=("Arial", 12)).pack(pady=5)
        self.entry_new_pass = tk.Entry(self.master, font=("Arial", 12), show="*")
        self.entry_new_pass.pack(pady=5)

        tk.Button(self.master, text="Registrar", command=self.register_user, width=15, font=("Arial", 12)).pack(pady=10)

        tk.Button(self.master, text="Voltar", command=self.login_screen, width=15, font=("Arial", 12)).pack(pady=10)

    def register_user(self):
        username = self.entry_new_user.get()
        password = self.entry_new_pass.get()

        if not username or not password:
            messagebox.showerror("Erro", "Preencha todos os campos.")
            return

        usuarios = carregar_usuarios()

        if username in usuarios:
            messagebox.showerror("Erro", "Usu√°rio j√° existe.")
        else:
            salvar_usuario(username, password)
            messagebox.showinfo("Sucesso", f"Usu√°rio '{username}' registrado com sucesso!")
            self.entry_new_user.delete(0, tk.END)
            self.entry_new_pass.delete(0, tk.END)
            self.login_screen()

    def main_screen(self):
        for widget in self.master.winfo_children():
            widget.destroy()

        tk.Label(self.master, text="Bem-vinda √† Biblioteca", font=("Arial", 24)).pack(pady=20)

        frame_buttons = tk.Frame(self.master)
        frame_buttons.pack(pady=10)

        options = [
            ("üìö Adicionar Livro", self.add_book),
            ("üìñ Ver Todos os Livros", self.view_books),
            ("‚ùå Remover Livro", self.remove_book),
            ("üîç Buscar Livro", self.search_book),
            ("üì¶ Alugar Livro", self.borrow_book),
            ("üîÑ Devolver Livro", self.return_book),
            ("üìú Ver Livros Emprestados", self.view_borrowed_books),
        ]

        for text, command in options:
            tk.Button(frame_buttons, text=text, command=command, width=20, height=2, font=("Arial", 12)).pack(pady=5)

        tk.Button(self.master, text="üö™ Sair", command=self.master.destroy, width=20, height=2, font=("Arial", 12)).pack(pady=20)

    def add_book(self):
        def salvar_livro():
            title = entry_title.get()
            author = entry_author.get()
            genre = entry_genre.get()
            release = entry_release.get()
            synopsis = text_synopsis.get("1.0", tk.END).strip()

            if not (title and author and genre and release and synopsis):
                messagebox.showerror("Erro", "Todos os campos devem ser preenchidos.")
                return

            self.books.append({
                "T√≠tulo": title,
                "Autor": author,
                "G√™nero": genre,
                "Data de Lan√ßamento": release,
                "Sinopse": synopsis,
            })
            messagebox.showinfo("Sucesso", f"Livro '{title}' adicionado com sucesso!")
            add_window.destroy()

        add_window = tk.Toplevel(self.master)
        add_window.title("Adicionar Livro")
        add_window.geometry("500x500")

        tk.Label(add_window, text="T√≠tulo:", font=("Arial", 12)).pack(pady=5)
        entry_title = tk.Entry(add_window, font=("Arial", 12))
        entry_title.pack(pady=5)

        tk.Label(add_window, text="Autor:", font=("Arial", 12)).pack(pady=5)
        entry_author = tk.Entry(add_window, font=("Arial", 12))
        entry_author.pack(pady=5)

        tk.Label(add_window, text="G√™nero:", font=("Arial", 12)).pack(pady=5)
        entry_genre = tk.Entry(add_window, font=("Arial", 12))
        entry_genre.pack(pady=5)

        tk.Label(add_window, text="Data de Lan√ßamento:", font=("Arial", 12)).pack(pady=5)
        entry_release = tk.Entry(add_window, font=("Arial", 12))
        entry_release.pack(pady=5)

        tk.Label(add_window, text="Sinopse:", font=("Arial", 12)).pack(pady=5)
        text_synopsis = tk.Text(add_window, font=("Arial", 12), height=5)
        text_synopsis.pack(pady=5)

        tk.Button(add_window, text="Salvar", command=salvar_livro, font=("Arial", 12)).pack(pady=10)

    def view_books(self):
        if not self.books:
            messagebox.showinfo("Livros", "Nenhum livro cadastrado.")
            return

        self.show_books("Todos os Livros", self.books)

    def remove_book(self):
        title = simpledialog.askstring("Remover Livro", "T√≠tulo do livro a ser removido:")
        if not title:
            return

        for book in self.books:
            if book["T√≠tulo"].lower() == title.lower():
                self.books.remove(book)
                messagebox.showinfo("Sucesso", f"Livro '{title}' removido com sucesso!")
                return
        messagebox.showerror("Erro", "Livro n√£o encontrado.")

    def search_book(self):
        title = simpledialog.askstring("Buscar Livro", "T√≠tulo do livro:")
        if not title:
            return

        results = [book for book in self.books if title.lower() in book["T√≠tulo"].lower()]
        if not results:
            messagebox.showinfo("Busca", "Nenhum livro encontrado.")
        else:
            self.show_books("Resultado da Busca", results)

    def borrow_book(self):
        if not self.books:
            messagebox.showinfo("Livros", "Nenhum livro dispon√≠vel para alugar.")
            return

        title = simpledialog.askstring("Alugar Livro", "T√≠tulo do livro:")
        for book in self.books:
            if book["T√≠tulo"].lower() == title.lower():
                self.books.remove(book)
                self.borrowed_books.append(book)
                messagebox.showinfo("Sucesso", f"Livro '{title}' alugado com sucesso!")
                return
        messagebox.showerror("Erro", "Livro n√£o encontrado.")

    def return_book(self):
        if not self.borrowed_books:
            messagebox.showinfo("Livros Emprestados", "Nenhum livro emprestado.")
            return

        title = simpledialog.askstring("Devolver Livro", "T√≠tulo do livro:")
        for book in self.borrowed_books:
            if book["T√≠tulo"].lower() == title.lower():
                self.borrowed_books.remove(book)
                self.books.append(book)
                messagebox.showinfo("Sucesso", f"Livro '{title}' devolvido com sucesso!")
                return
        messagebox.showerror("Erro", "Livro n√£o encontrado.")

    def view_borrowed_books(self):
        if not self.borrowed_books:
            messagebox.showinfo("Livros Emprestados", "Nenhum livro emprestado.")
        else:
            self.show_books("Livros Emprestados", self.borrowed_books)

    def show_books(self, title, books):
        window = tk.Toplevel(self.master)
        window.title(title)
        window.geometry("600x400")

        text_area = scrolledtext.ScrolledText(window, wrap=tk.WORD, font=("Arial", 12))
        text_area.pack(pady=10, padx=10, fill="both", expand=True)

        for book in books:
            text_area.insert(tk.END, f"T√≠tulo: {book['T√≠tulo']}\n")
            text_area.insert(tk.END, f"Autor: {book['Autor']}\n")
            text_area.insert(tk.END, f"G√™nero: {book['G√™nero']}\n")
            text_area.insert(tk.END, f"Data de Lan√ßamento: {book['Data de Lan√ßamento']}\n")
            text_area.insert(tk.END, f"Sinopse: {book['Sinopse']}\n")
            text_area.insert(tk.END, "-" * 50 + "\n")

        text_area.config(state=tk.DISABLED)

if __name__ == "__main__":
    root = tk.Tk()
    Biblioteca(root)
    root.mainloop()
